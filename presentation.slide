Instrumenting Go application
16 Feb 2017

Mike Kabischev
Software engineer, juno
kabischev@gmail.com
@mkabischev

* Instrumentation

* Instrumentation

In context of computer programming, instrumentation refers to an ability to monitor or measure the level of a product's performance, to diagnose errors and to write trace information. Programmers implement instrumentation in the form of code instructions that monitor specific components in a system (for example, instructions may output logging information to appear on screen). Instrumentation is necessary to review the performance of the application.

* Logs

* Std log package

.code examples/logs/std/main.go /START OMIT/,/END OMIT/ HLx

* Std log package

.code examples/logs/std/main.go /START OMIT/,/END OMIT/ HLx
 2017/02/11 14:53:08 request received: /user/1
 2017/02/11 14:53:08 error occured: some error
 2017/02/11 14:53:08 request received: /user/2
 2017/02/11 14:53:08 request received: /user/3
 2017/02/11 14:53:08 request received: /user/4
 2017/02/11 14:53:08 request received: /user/5
 2017/02/11 14:53:08 error occured: some error
 2017/02/11 14:53:08 error occured: some error

* Std log package

.code examples/logs/std2/main.go /LOG1 OMIT/,/LOG2 OMIT/ HLx

* Std log package

.code examples/logs/std2/main.go /START OMIT/,/END OMIT/ HLx

 db7f03bb-b9a0-43c8-97e0-ed395531d94e 2017/02/11 14:55:15 request received: /user/1
 db7f03bb-b9a0-43c8-97e0-ed395531d94e 2017/02/11 14:55:15 error occured: some error // query #1
 a772ac1a-0a9b-4968-af8f-4e6ded1bc48c 2017/02/11 14:55:15 request received: /user/2
 f2935158-b173-4840-8a46-06abada8f771 2017/02/11 14:55:15 request received: /user/3
 92c05c1e-e963-4fda-af2b-c0dfb481238f 2017/02/11 14:55:15 request received: /user/4
 9d3a8213-998a-4a0e-b481-24066c644444 2017/02/11 14:55:15 request received: /user/5
 a772ac1a-0a9b-4968-af8f-4e6ded1bc48c 2017/02/11 14:55:15 error occured: some error // query #2
 92c05c1e-e963-4fda-af2b-c0dfb481238f 2017/02/11 14:55:15 error occured: some error // query #4

* 3rd party log packages

- logrus
- zap

.link http://awesome-go.com

* Structured logging

.code examples/logs/logrus/main.go /LOG1 OMIT/,/LOG2 OMIT/ HLx

 INFO[0001] request received: /user/1                requestID=6366e218-4520-4ac1-84f5-96f14105ead4
 INFO[0004] request received: /user/2                requestID=d8fab5af-18fb-4971-a0ea-80110ede2041
 INFO[0005] request received: /user/3                requestID=5b6938d1-7b13-43b5-93c1-3c41dfd6692b
 ERRO[0005] error occured: some error                requestID=5b6938d1-7b13-43b5-93c1-3c41dfd6692b

* Structured logging

.code examples/logs/logrus/main.go /USER1 OMIT/,/USER2 OMIT/ HLx
 INFO[0024] request received: /user/2       requestID=f54f5ff5-da60-4d38-a2f8-57417d411665 userID=2
 INFO[0047] request received: /user/4       requestID=28522c2a-9202-4e43-8b73-e8b571f7b83a userID=4
 ERRO[0047] error occured: some error       requestID=28522c2a-9202-4e43-8b73-e8b571f7b83a userID=4


* Logging

- Use structured loggers
- Add request-scoped data to fields
- Use machine friendly formats
- Write logs to stderr
- Use log aggregation systems (ELK, Graylog, Splunk, etc)

* Metrics

* Push vs pull model

Image about push & pull models. Differences, proms & cons

* Metrics

List of popular libraries for collecting metrics

* Metrics

- *Gauges* erterteg i4reithm eroiti 5452o6n erogih o4i5ny ornhofgret wtiwejrt oiwejrtoifjgij horityer oitjyer otiyje roityjertoij
- Counters
- Histograms

* Metrics

What to collect?

* Push model

 - Graphite
 - Statsd
 - InfluxDB

* Push model
 - name collision
 - configuration
 - performance

* Pull model
 - no collisions!
 - zero configuration

* Prometheus

How to wrap http.Handler?

* Prometheus

Example of scraping. Builtin metrics (memory, goroutines, other staff)

* Prometheus

Example of custom collector. Channel length.

Notice about single call.


* Distributed tracing

: Notes
