Instrumenting Go application
16 Feb 2017

Mike Kabischev
Software engineer, juno
kabischev@gmail.com
@mkabischev

* Instrumentation

In context of computer programming, instrumentation refers to an ability to monitor the level of a product's performance, to diagnose errors and to write trace information. Programmers implement instrumentation in the form of code instructions. Instrumentation is necessary to review the performance of the application.

* Juno

- 4 mobile applications
- ~60 microservices
- hundreds of running containers
- thousands RPS
- 40+ backend engineers

* Logs

* Logs

- Fundamental part of applications
- Show progress of execution
- Help to debug application
- Save hours for developers & OPS team

* What to log?

- Errors
- Events
- State
- Requests
- Some debug information

* How to log?

Std log package:

- no log level support
- only plain-text format
- no struct-logging support

Alternatives:

- *github.com/Sirupsen/logrus*
- github.com/uber-go/zap
- github.com/golang/glog

.link https://github.com/avelino/awesome-go#logging

* Structured logging

Helps to answer to questions: *What*? *Where*? *When*?
.code examples/logs/structured/example.json

* Structured logging with logrus

.code examples/logs/structured/main.go /START OMIT/,/END OMIT/ HLx

* Logging infrastructure

.image examples/logs/structured/overview.png _ 650

* Logs

1. Use log management system

- ELK stack
- Graylog2
- etc

2. Use structured logging

- requestID (*always*)
- userID
- etc

3. Don`t enable only *errors* mode in production

* Metrics

* Metrics

- Show performance of application
- Helps to detect impacts of deployments
- May trigger alerts

* What to measure?

Requests:

- rate
- errors
- duration

System:

- number of goroutines
- memory usage
- gc performance

* How to measure? Libraries

- expvar package
- github.com/rcrowley/go-metrics
- github.com/go-kit/metrics
- *github.com/prometheus/client_golang*
- github.com/influxdata/influxdb/client

* How to measure? Storages

Push model:

- Graphite
- OpenTSDB
- InfluxDB

Pull model:

- *Prometheus*

* Monitoring infrastructure

.image examples/metrics/pull_model.png _ 650

* Prometheus & pull model

- No metric name collisions
- Application doesn`t depend on monitoring system
- Easy local debug
- Clean and good client API

* Multidimensional data model

Metrics

 request_count{service="ms_routing", instance="10.0.1.1", group="backend0"} 14163
 request_count{service="ms_routing", instance="10.0.1.2", group="backend0"} 14195
 request_count{service="ms_routing", instance="10.0.2.1", group="backend1"} 15434

*request_count* - metric name
*service*, *instance*, *group* - labels names

Count all requests

 sum(request_count{service="ms_routing"}) 43792

Count requests in group *backend0*

 sum(request_count{service="ms_routing", group="backend0"}) 28358

* Types of metrics

- *Counter* is a cumulative metric that represents a single numerical value that only ever goes up.
- *Gauge*  is a metric that represents a single numerical value that can arbitrarily go up and down.
- *Histogram* samples observations and counts them in configurable buckets.
- *Summary* similar to a histogram. Also provides a total count of observations and a sum of all observed values, it calculates configurable quantiles over a sliding time window.

* Histogram

.code examples/metrics/histogram/main.go /START OMIT/,/END OMIT/

Creates metrics:

 # HELP request_duration_seconds handler duration
 # TYPE request_duration_seconds histogram
 request_duration_seconds_bucket{le="0.01"} 3
 request_duration_seconds_bucket{le="0.03"} 11
 request_duration_seconds_bucket{le="0.05"} 15
 request_duration_seconds_bucket{le="+Inf"} 16
 request_duration_seconds_sum 0.3769818180000001
 request_duration_seconds_count 16

* Summary

.code examples/metrics/summary/main.go /START OMIT/,/END OMIT/

Creates metrics:

 # HELP request_duration_seconds handler duration
 # TYPE request_duration_seconds summary
 request_duration_seconds{quantile="0.5"} 0.020407053
 request_duration_seconds{quantile="0.9"} 0.035535534
 request_duration_seconds{quantile="0.99"} 0.049688516
 request_duration_seconds_sum 0.46448871900000005
 request_duration_seconds_count 21

* How we use it?

- Middlewares for RPC handlers
- Decorators for external APIs & libraries
- Integration with database/storage drivers
- Business events & metrics

* Distributed tracing

* Distributed system

.image examples/tracing/tracing_problem.png _ 400


* Tracing systems

- Google Dapper (~2004)
- Twitter Zipkin (2012)
- Sourcegraph Appdash (2015)

* OpenTracing.io

A vendor-neutral open standard for distributed tracing.

- Standardized semantic (span, trace, events, baggage)
- Standardized client libraries (Go, Java, Python)
- Popular tracers support (Zipkin, Appdash, Lightstep, Jaeger)

.link http://opentracing.io
.link https://github.com/opentracing/opentracing-go

* Distributed request

.image examples/tracing/tracing_problem.png _ 400

* Trace

.image examples/tracing/tracing_kolbasa_3.png _ 1000

* Span

Each span has following state:

- Operation name
- Start timestamp
- End timestamp
- Span tags
- Span logs
- SpanContext

* Tracing infrastructure

.image examples/tracing/tracing_info.png _ 500

* Creating spans

Create root span

.code examples/tracing/example.go /SPAN1 OMIT/,/SPAN2 OMIT/

Create child span

.code examples/tracing/example.go /SPAN3 OMIT/,/SPAN4 OMIT/

* Context support

.code examples/tracing/example.go /SPAN5 OMIT/,/SPAN6 OMIT/

* Context propagation (client-side)

.code examples/tracing/example.go /SPAN7 OMIT/,/SPAN8 OMIT/ HLx

* Context propagation (server-side)

.code examples/tracing/example.go /SPAN9 OMIT/,/SPAN10 OMIT/ HLx

* Context propagation

.image examples/tracing/client_server.png _ 1000

* HTTP request tracing

.code examples/tracing/http.go /START OMIT/,/END OMIT/ HLx

* Span logs

.image examples/tracing/http_events.png _ 800

* Span tags

.image examples/tracing/http_tags.png _ 600

* How to start?

- Start adding spans to your application
- Run local simple tracing system for debugging
- Add logs & tags to spans
- Deploy tracing system to production
- Enjoy

* Questions?

: Notes
