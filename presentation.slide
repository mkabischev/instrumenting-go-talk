Instrumenting Go application
24 May 2017

Mike Kabischev
Software engineer, Juno
kabischev@gmail.com
@mkabischev

* Juno

- 4 mobile applications
- ~70 microservices
- hundreds of running containers
- thousands RPS
- 40+ backend engineers

* Architecture overview

.image examples/images/overview.png 580 _

* Instrumentation

In context of computer programming instrumentation refers to an ability

- to monitor the level of a product's performance
- to diagnose errors
- to write trace information

Programmers implement instrumentation in the form of code instructions. Instrumentation is necessary to review the performance of the application.

* Twelve-factor app manifesto

- Use *declarative* formats for setup automation
- Offer *maximum* *portability* between execution environments
- Are suitable for *deployment* on modern *cloud* *platforms*
- *Minimize* *divergence* between development and production
- Can *scale* *up* without significant changes to tooling, architecture, or development practices

.link https://12factors.net


* Twelve-factor app

- Use *declarative* formats for setup automation
- Offer *maximum* *portability* between execution environments
- Are suitable for *deployment* on modern *cloud* *platforms*
- *Minimize* *divergence* between development and production
- Can *scale* *up* without significant changes to tooling, architecture, or development practices

.link https://12factors.net

* Logs

* Logs

- Fundamental part of applications
- Show progress of execution
- Help to debug application
- Save hours for developers & OPS team

* What to log?

- Errors
- Events
- State
- Requests
- Some debug information

* How to log?

Std log package:

- no log level support
- only plain-text format
- no struct-logging support

Alternatives:

- *github.com/Sirupsen/logrus*
- github.com/uber-go/zap
- github.com/golang/glog

.link https://github.com/avelino/awesome-go#logging

* Structured logging

Helps to answer to questions: *What*? *Where*? *When*?
.code examples/logs/structured/example.json

* Logger + Context = ❤️

.code examples/logs/structured/file.go /START OMIT/,/END OMIT/ HLx

* Logger + Context = ❤️

Prepare logger
.code examples/logs/structured/file.go /PREPARE_START OMIT/,/PREPARE_END OMIT/ HLx

Use it in handler
.code examples/logs/structured/file.go /HANDLER_START OMIT/,/HANDLER_END OMIT/ HLx

* Structured logging

.code examples/logs/structured/main /START OMIT/,/END OMIT/ HLx

* Logging infrastructure

.image examples/logs/structured/overview2.png _ 680

* Logs

1. Use log management system

- ELK stack
- Graylog2
- etc

2. Use structured logging

- requestID (*always*)
- userID
- etc

3. Don`t enable only *errors* mode in production

* Metrics

* Metrics

- Show performance of application
- Helps to detect impacts of deployments
- May trigger alerts

* What to measure?

Runtime:

- number of goroutines/threads
- memory usage & GC timing

Service:

- request rate
- request duration
- errors

External resources:

- request rate/duration
- errors
- connections

* How to measure? Libraries

- expvar package
- github.com/rcrowley/go-metrics
- github.com/go-kit/metrics
- *github.com/prometheus/client_golang*
- github.com/influxdata/influxdb/client

* How to measure? Storages

Push model:

- Graphite
- OpenTSDB
- InfluxDB

Pull model:

- *Prometheus*

* Monitoring infrastructure

.image examples/metrics/pull_model_2.png _ 750

* Prometheus & pull model

- Helps to avoid metric name collisions
- Application doesn`t depend on monitoring system
- Easy local debug
- Clean and good client API

* Multidimensional data model

Metrics

 request_count{service="routing", instance="10.0.1.1", group="backend0"} 14163
 request_count{service="routing", instance="10.0.1.2", group="backend0"} 14195
 request_count{service="routing", instance="10.0.2.1", group="backend1"} 15434

*request_count* - metric name
*service*, *instance*, *group* - labels names

Count all requests

 sum(request_count{service="routing"}) 43792

Count requests in group *backend0*

 sum(request_count{service="routing", group="backend0"}) 28358

* Types of metrics

- *Counter* is a cumulative metric that represents a single numerical value that only ever goes up.
- *Gauge*  is a metric that represents a single numerical value that can arbitrarily go up and down.
- *Histogram* samples observations and counts them in configurable buckets.
- *Summary* similar to a histogram. Also provides a total count of observations and a sum of all observed values, it calculates configurable quantiles over a sliding time window.

* How we use it?

- Middlewares for RPC layer
- Decorators for external APIs & libraries
- Integration with database/storage drivers
- Business events & metrics

* Metric decorators

.code examples/metrics/middlewares.go /START OMIT/,/END OMIT/ HLx

* Distributed tracing

* Distributed system

.image examples/tracing/tracing_problem_2.png _ 400


* Tracing systems

- Google Dapper (~2004)
- Twitter Zipkin (2012)
- Sourcegraph Appdash (2015)
- Uber Jaeger (2017)

* OpenTracing.io

A vendor-neutral open standard for distributed tracing.

- Standardized semantic (span, trace, events, baggage)
- Standardized client libraries (Go, Java, Python)
- Popular tracers support (Zipkin, Appdash, Lightstep, Jaeger)

.link http://opentracing.io
.link https://github.com/opentracing/opentracing-go

* Distributed request

.image examples/tracing/tracing_problem_2.png _ 400

* Trace

.image examples/tracing/tracing_kolbasa_4.png _ 1000

* Span

Each span has following state:

- Operation name
- Start timestamp
- End timestamp
- Span tags
- Span logs
- SpanContext

* Creating spans

Create root span

.code examples/tracing/example.go /SPAN1 OMIT/,/SPAN2 OMIT/ HLx

Create child span

.code examples/tracing/example.go /SPAN3 OMIT/,/SPAN4 OMIT/ HLx

* Context support

.code examples/tracing/example.go /SPAN5 OMIT/,/SPAN6 OMIT/ HLx

* Context propagation

.image examples/tracing/propagation.png _ 500

* HTTP request tracing

.code examples/tracing/http.go /START OMIT/,/END OMIT/ HLx

* HTTP request tracing

.image examples/tracing/client_server.png _ 1000

* Span logs

.image examples/tracing/http_events.png _ 800

* Span tags

.image examples/tracing/http_tags.png _ 600

* Integration roadmap

- RPC layer (middlewares & clients)
- external APIs
- databases & caches
- critical paths
- tags & logs

* Questions?

: Notes
